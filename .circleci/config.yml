version: 2.1
orbs:
  node: circleci/node@6.1.0
  browser-tools: circleci/browser-tools@1.4.8
  gcp-cli: circleci/gcp-cli@3.2.2

commands:
  sonarcloud-scan:
    description: Detect bugs and vulnerabilities
    parameters:
      cache_version:
        default: 1
        description: increment this value if the cache is corrupted and you want to start with a clean cache
        type: integer
      project_root:
        default: .
        description: the root of the project that should be analyzed (relative to the root directory of the repository)
        type: string
      sonar_token_variable_name:
        default: SONAR_TOKEN
        description: the name of the environment variable where the SonarCloud API token is stored
        type: env_var_name
    steps:
      - run:
          name: Create cache directory if it doesn't exist
          command: mkdir -p /tmp/cache/scanner
      - run:
          name: SonarCloud Scan
          command: |
            set -e
            VERSION=6.2.1.4610
            SONAR_TOKEN=$<<parameters.sonar_token_variable_name>>
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            ARCH="x64"
            echo $SONAR_USER_HOME

            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS-$ARCH.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS-$ARCH.zip -d $SCANNER_DIRECTORY
              rm sonar-scanner-cli-$VERSION-$OS-$ARCH.zip

              chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/bin/sonar-scanner
              chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/jre/bin/java
            fi

            API_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls?head=${CIRCLE_PROJECT_USERNAME}:${CIRCLE_BRANCH}"

            RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" "${API_URL}")

            PR_COUNT=$(echo "${RESPONSE}" | jq '. | length')

            if [[ "${PR_COUNT}" -eq 0 ]]; then
              echo "No pull requests found for branch '${CIRCLE_BRANCH}'. Skipping pull request analysis."
            elif [[ "${PR_COUNT}" -eq 1 ]]; then
              PR_NUMBER=$(echo "${RESPONSE}" | jq -r '.[0].number')
              PR_BASE_BRANCH=$(echo "${RESPONSE}" | jq -r '.[0].base.ref')
              echo "Pull request number for branch '${CIRCLE_BRANCH}': ${PR_NUMBER}"
              export SONARQUBE_SCANNER_PARAMS="{\"sonar.pullrequest.key\":\"${PR_NUMBER}\",\"sonar.pullrequest.branch\":\"${CIRCLE_BRANCH}\",\"sonar.pullrequest.base\":\"${PR_BASE_BRANCH}\"}"
            else
              echo "Warning: ${PR_COUNT} pull requests found for branch '${CIRCLE_BRANCH}'. Skipping pull request analysis."
            fi

            echo "sonar.nodejs.executable=/usr/local/bin/node" >> $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/conf/sonar-scanner.properties

            cd <<parameters.project_root>>
            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/bin/sonar-scanner

jobs:
  build-test:
    executor:
      name: node/default
      tag: lts-browsers
      resource_class: medium
    steps:
      - browser-tools/install-chrome
      - checkout
      - run:
          name: Log versions
          command: |
            node --version
            npm --version
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Setup Environment Variables
          command: echo 'export PATH="$PWD/node_modules/.bin":"$PATH"' >> "$BASH_ENV"
      - run:
          name: Lint
          command: ng lint
      - run:
          name: Test
          command: ng test --code-coverage
          when: always
      - store_test_results:
          path: ./junit
          when: always
      - sonarcloud-scan
      - run:
          name: Build
          command: ng build -c production --deploy-url "static/"
      - run:
          name: Organize outputs for GCP
          command: |
            cp public/favicon.ico dist/abcall/browser
            cp public/images/logo40.png dist/abcall/browser
            cp src/redirect-i18n.html dist/abcall/browser/index.html
            for lang in es-AR es-CO pt-BR; do
              mkdir "dist/abcall/browser/$lang/static"
              mv "dist/abcall/browser/$lang/"*.{css,js} "dist/abcall/browser/$lang/static"
              mv "dist/abcall/browser/$lang/media" "dist/abcall/browser/$lang/static"
            done
      - persist_to_workspace:
          root: dist/abcall
          paths:
            - browser

  e2e-test:
    executor:
      name: node/default
      tag: lts-browsers
      resource_class: large
    steps:
      - browser-tools/install-chrome
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Setup Environment Variables
          command: echo 'export PATH="$PWD/node_modules/.bin":"$PATH"' >> "$BASH_ENV"
      - run:
          name: Start angular server
          background: true
          command: ng serve -c production --no-watch
      - run:
          name: Setup fixtures
          command: |
            mkdir -p cypress/fixtures
            echo "$CY_LOGIN_ADMIN" > cypress/fixtures/login.admin.json
            echo "$CY_LOGIN_AGENT" > cypress/fixtures/login.agent.json
            echo "$CY_LOGIN_ANALYST" > cypress/fixtures/login.analyst.json
      - run:
          name: Wait for the server to start
          command: wait-on -t 30s http://localhost:4200
      - run:
          name: Run cypress tests
          command: cypress run --browser chrome
      - store_test_results:
          path: ./cypress/reports
          when: always
      - store_artifacts:
          path: ./cypress/screenshots
          when: always
      - store_artifacts:
          path: ./cypress/videos
          when: always

  deploy-dev:
    executor: gcp-cli/google
    resource_class: small
    steps:
      - gcp-cli/setup:
          use_oidc: true
          google_project_id: GCP_PROJECT_ID
          google_project_number: GCP_PROJECT_NUMBER
          workload_identity_pool_id: GCP_WIP_ID
          workload_identity_pool_provider_id: GCP_WIP_PROVIDER_ID
          service_account_email: GCP_SERVICE_ACCOUNT_EMAIL
      - attach_workspace:
          at: workspace
      - run:
          name: Deploy
          command: gcloud storage rsync workspace/browser gs://$DEV_BUCKET_FRONT --recursive --delete-unmatched-destination-objects
      - run:
          name: Invalidate cache
          command: gcloud compute url-maps invalidate-cdn-cache lb-url-map --path='/*' --global --async

  deploy-prod:
    executor: gcp-cli/google
    resource_class: small
    steps:
      - gcp-cli/setup:
          use_oidc: true
          google_project_id: GCP_PROJECT_ID
          google_project_number: GCP_PROJECT_NUMBER
          workload_identity_pool_id: GCP_WIP_ID
          workload_identity_pool_provider_id: GCP_WIP_PROVIDER_ID
          service_account_email: GCP_SERVICE_ACCOUNT_EMAIL
      - attach_workspace:
          at: workspace
      - run:
          name: Deploy
          command: gcloud storage rsync workspace/browser gs://$PROD_BUCKET_FRONT --recursive --delete-unmatched-destination-objects
      - run:
          name: Invalidate cache
          command: gcloud compute url-maps invalidate-cdn-cache lb-url-map --path='/*' --global --async

workflows:
  cicd:
    jobs:
      - build-test
      - e2e-test:
          requires:
            - build-test
      - deploy-dev:
          context: gcp-dev
          requires:
            - build-test
            - e2e-test
          filters:
            branches:
              only:
                - develop
      - deploy-prod:
          context: gcp-prod
          requires:
            - build-test
            - e2e-test
          filters:
            branches:
              only:
                - main
